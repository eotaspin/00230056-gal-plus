openapi: 3.0.1
info:
  title: Provision API
  description: TOP Provision API
  version: 0.0.10
servers:
- url: http://xxxx.aeocp.labs.gvp.telefonica.com/
security:
- APIKeyHeader: []
tags:
- name: Users Provision
  description: Provision of Users -> user info, entitlements, devices
  externalDocs:
    description: TBD
    url: http://TBD/externalDocs.html
- name: User Products Management
  description: Provision of user Products
- name: User Devices Management
  description: Provision of user Devices
paths:
  /instances/{instanceId}/users:
    post:
      tags:
      - Users Provision
      summary: Adds a new user
      operationId: createUser
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      requestBody:
        description: User object to be created
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
      x-codegen-request-body-name: user
  /instances/{instanceId}/users/{uniqueId}:
    parameters:
    - $ref: '#/components/parameters/X-Request-ID'
    - $ref: '#/components/parameters/instanceId'
    - $ref: '#/components/parameters/uniqueId'  
    get:
      tags:
      - Users Provision
      summary: Get User info
      operationId: getUser
      responses:
        "200":
          $ref: "#/components/responses/200-User"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
    put:
      tags:
      - Users Provision
      summary: Updates a user
      operationId: updateUser
      requestBody:
        description: User object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
      x-codegen-request-body-name: user
    delete:
      tags:
      - Users Provision
      summary: 'Deletes a user '
      description: 'User/account delete operation will not do a physical removal of
        the user/account in the GVP platform. Instead, the account will be renamed
        and left in a state where the account will be unusable. This status is not
        reversible, that is, user/account cannot be re-activated again. '
      operationId: deleteUser
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
  /instances/{instanceId}/users/{uniqueId}/move/{action}:
    put:
      tags:
      - Users Provision
      summary: Transfers
      description: change residence
      operationId: moveUser
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'  
      - $ref: '#/components/parameters/action'  
      requestBody:
        description: User object to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
      x-codegen-request-body-name: user
  /provision/{instanceId}/user/{uniqueId}/status/{status}:
    put:
      tags:
      - Users Provision
      summary: Changes User Status (ACTIVE, SUSPENDED)
      description: 'Operation used to halt the service of the user temporary, to resume
        the service or to cancel permanentlya user '
      operationId: updateUserStatus
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'  
      - $ref: '#/components/parameters/status'  
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
  /instances/{instanceId}/users/{uniqueId}/products:
    get:
      tags:
      - User Products Management
      summary: Get User Products (Subscriptions, Movies, PPV or Vouchers)
      description: This operation allows to query for Products of the user from OSS/BSS
        systems
      operationId: getUserProducts
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'
      - $ref: '#/components/parameters/productType'
      - $ref: '#/components/parameters/productCode'
      - $ref: '#/components/parameters/purchaseId'
      responses:
        "200":
          $ref: "#/components/responses/200-ProductList"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
    put:
      tags:
      - User Products Management
      summary: Adds/removes products to the account (Subscriptions, Movies, PPV or
        Vouchers)
      description: This operation allows to change Products of the user from OSS/BSS
        systems
      operationId: userProductsManagement
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'
      requestBody:
        description: User Products to be updated
        content:
          application/json:
            schema: 
                $ref: '#/components/schemas/UserProductsUpdate'
             # allOf: 
             # - $ref: '#/components/schemas/UserProducts'
             # - type: object
             #   properties:
             #     serviceType:
             #       $ref: '#/components/schemas/ServiceType'
              
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
      x-codegen-request-body-name: products
  /instances/{instanceId}/users/{uniqueId}/devices:
    get:
      tags:
      - User Devices Management
      summary: Get User Devices
      description: This operation allows to query for Devices of the user from OSS/BSS
        systems
      operationId: getUserDevices
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'
      responses:
        "200":
          $ref: "#/components/responses/200-DeviceList"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
    put:
      tags:
      - User Devices Management
      summary: Adds/removes devices to the account
      description: This operation allows to change Devices of the user from OSS/BSS
        systems
      operationId: userDevicesManagement
      parameters:
      - $ref: '#/components/parameters/X-Request-ID'
      - $ref: '#/components/parameters/instanceId'
      - $ref: '#/components/parameters/uniqueId'
      requestBody:
        description: User Devices to be updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DevicesList'
        required: true
      responses:
        "200":
          $ref: "#/components/responses/200-Response"
        "400":
          $ref: "#/components/responses/400-Response"
        #"401":
        #  $ref: "#/components/responses/401-Response"
        "404":
          $ref: "#/components/responses/404-Response"
        "409":
          $ref: "#/components/responses/409-Response"
        "500":
          $ref: "#/components/responses/500-Response"
      x-codegen-request-body-name: devices
components:
  schemas:
    User:
      type: object
      properties:
        uniqueId:
          type: string
          description: uniqueId in GVP / administrative Code in TdE
        status:
          type: string
          description: user status
        clientId:
          type: string
          description: internal Id in GVP platform, generated automatically during
            user creation
        #platformId:
        #  type: string
        email:
          type: string
        password:
          type: string
        serviceType:
          $ref: '#/components/schemas/ServiceType'
        commercialOffer:
          type: string
          description: RESIDENTIAL, BUSINESS, OTT, ...
        geographicArea:
          type: integer
        blackoutArea:
          type: integer
        currency:
          type: string
        monthlyLimit:
          type: integer
        serverCode:
          type: string
        timeZone:
          type: string
        application:
          type: string
          description: In TdE, Imagenio flavour
        addressing:
          type: string
          description: Type of addressing. In TdE always STATIC_IP
        stbIps:
          type: array
          description: List of IP addresses provisioned to the user
          items:
            type: string
        dvrEnabled:
          type: boolean
        HDMediaStreams:
          type: boolean
        SDMediaStreams:
          type: boolean
        maxDevices:
          type: integer
        tvHd:
          type: integer
        lineQuality:
          type: integer
        limitVodPurchases:
          type: integer
        limitPPVPurchases:
          type: integer
        limitUserBonusPurchases:
          type: integer
        subscriberLineUpstream:
          type: integer
        subscriberLineDOwnstream:
          type: integer
        serviceFlags:
          $ref: '#/components/schemas/ServiceFlags'
        products:
          $ref: '#/components/schemas/UserProducts'
        devicesList:
          $ref: '#/components/schemas/DevicesList'
    UserProducts:
      type: object
      description: Object with the User Products definitions      
      properties:
        productsMode:
          $ref: '#/components/schemas/ProductsMode'
        pendingConsolidation:
          $ref: '#/components/schemas/PendingConsolidation'
        suscriptionsList:
          type: array
          description: List of Subscriptions.
          items:
            $ref: '#/components/schemas/Product'
        moviesList:
          type: array
          description: List of Movies.
          items:
            $ref: '#/components/schemas/Movie'
        ppvsList:
          type: array
          description: List of Products.
          items:
            $ref: '#/components/schemas/PPV'
        vouchersList:
          type: array
          description: List of Vouchers.
          items:
            $ref: '#/components/schemas/Product'

    UserProductsUpdate:
      type: object
      allOf: 
        - type: object
          properties:
            serviceType:
              $ref: '#/components/schemas/ServiceType'
        - $ref: '#/components/schemas/UserProducts'

    UserProductsResponse:
      type: object
      description: Object with the User Products Response definition      
      properties:
        suscriptionsList:
          type: array
          description: List of Subscriptions.
          items:
            $ref: '#/components/schemas/ProductGet'
        moviesList:
          type: array
          description: List of Movies.
          items:
            $ref: '#/components/schemas/ProductGet'
        ppvsList:
          type: array
          description: List of PPVs.
          items:
            $ref: '#/components/schemas/ProductGet'
        vouchersList:
          type: array
          description: List of Vouchers.
          items:
            $ref: '#/components/schemas/VoucherGet'
    ProductsMode:
      type: string
      description: Mode to process received ProductList. - If "INCREMENTAL" mode is
        set, all the Product objects have to contain the operation (ON, OFF, KEEP, CANCEL)
        to apply. - If "SNAPSHOT" mode is set, the received ProductList will be the
        final list for the User and operation field will be ignored.
      enum:
      - INCREMENTAL
      - SNAPSHOT
    ProductOperation:
      description: >-
        Operation to be applied to the Product.
        This parameter will be ignored if the productList is operated in 'SNAPSHOT' mode
      type: "string"
      enum:
      - "ON"
      - "OFF"
      - "KEEP"
      - "CANCEL"
    ProductStatus:
      description: >-
        Status of the Product
      type: "string"
      enum:
      - "Active"
      - "Inactive"
      - "PendingConsolidation"
      - "PendingCancellation"
      - "Cancelled"
      - "Expired"
    PendingConsolidation:
      type: integer
      description: 'Just in case of "ON" operation, this flag specifies whether this
        product must be assigned to the user in a CONSOLIDATED (0), or in a NON-consolidated
        (1) state. OPTIONAL parameter. Default value: 1.  '
      default: 1
    ProductBase:
      type: object
      properties:
        productCode:
          type: string
          description: Unique identifier of the product in operator's BSS/OSS systems (Commercial Code)
          example: EXT44131
        productId:
          type: string
          description: Product Id for transactional (Internal Product Id)
        #productType:
        #  type: string
        #  enum:
        #  - "Subscription"
        #  - "Movie"
        #  - "PPV"
        #  - "Voucher"
        #  example: "string"
    Product:
      type: object
      allOf: 
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            operation: 
              $ref : '#/components/schemas/ProductOperation'
    PPV:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
          properties:
            category:
              type: string
              description: 'Category Class associated to the purchase (For charging purposes).
                i.e: SD or HD in PPVs'
    Movie:
      type: object
      allOf:
        - $ref: '#/components/schemas/Product'
        - type: object
      properties:
        endDate:
          type: string
    ProductGet:
      type: object
      allOf: 
        - $ref: '#/components/schemas/ProductBase'
        - type: object
          properties:
            purchaseId:
              type: integer
              description: |
                Unique identifier of the purchase. This field is specially relevant in the case of vouchers, because a user can purchase the same voucher product more than once.
              example: 1222114                        
            status: 
              $ref : '#/components/schemas/ProductStatus'
            startDate:
              type: string
            endDate:
              type: string
    VoucherGet:
      type: object
      allOf: 
        - $ref: '#/components/schemas/ProductGet'
        - type: object
          properties:
            isUsed:
              type: integer
              enum: 
              - 0
              - 1
              description: |
                Used status of the Voucher
                  0 - Not-Used -> No purchases made with this Voucher.
                  1 - Used     -> At least one purchase made with this Voucher.
              example: 0
    ServiceType:
      type: string
      enum:
      - IPTV
      - OTT      
    DevicesList:
      type: array
      description: List of devices.
      items:
        $ref: '#/components/schemas/Device'
    Device:
      type: object
      properties:
        deviceTrustedId:
          type: string
          description: device MAC
        deviceExternalId:
          type: string
          description: device external ID
        deviceTypeId:
          type: integer
          example: 802
        deviceName:
          type: string
        status:
          type: string
          enum:
          - ON
          - OFF
      description: Add or Remove Device
    ServiceFlags:
      type: object
      properties:
        transactionalPurchases:
          type: integer
          description: |
            Flag enabling/disabling transactional purchases for User purchases\:
              * 0 = option is disabled.
              * 1 = option is enabled (default).
            Other values are not expected, and will be forbidden by the server.
          example: 1
        downloadToGo:
          type: integer
          description: |
            Flag enabling/disabling the "downloads" functionality for User services\:
              * 0 = option is disabled.
              * 1 = option is enabled (default).
            Other values are not expected, and will be forbidden by the server.
          example: 1
      description: Object containing the following elements.
    Result:
      type: object
      properties:
        uniqueId:
          type: string
          description: uniqueId in GVP / administrative Code in TdE
        userId:
          type: string
          description: internal Id in GVP platform, generated automatically during
            user creation
        resultCode:
          type: integer
          description: 0 means OK. Any other value means error
        description:
          type: string
          description: OK or error description
  responses:
    200-DeviceList:
      description: success
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/DevicesList'
    200-ProductList:
      description: success
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/UserProductsResponse'
    200-Response:
      description: success
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Result'
    200-User:
      description: success
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/User'
    400-Response:
      description: Bad Request
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Result'
    404-Response:
      description: Not Found
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content: {}
    409-Response:
      description: Conflict
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Result'
    500-Response:
      description: Internal Server Error
      headers:
        X-Request-ID:
          description: Header request ID for tracking purpouses.
          schema:
            type: string
      content:
        '*/*':
          schema:
            $ref: '#/components/schemas/Result'
  parameters:
    X-Request-ID:
      name: X-Request-ID
      in: header
      description: Header request ID for tracking purpouses
      schema:
        type: string
    instanceId:
      name: instanceId
      in: path
      description: Instance ID
      required: true
      schema:
        type: integer
        format: int32
    uniqueId:
      name: uniqueId
      in: path
      description: Unique ID
      required: true
      schema:
        type: integer
        format: int32
    status:
      name: status
      in: path
      required: true
      schema:
        type: string
        enum:
        - active
        - suspended
        - excluded
    action:
      name: action
      in: path
      description: 'Actions allowed during user transfer operation: start(N), cancelStart(NN),
        end(D), cancelEnd(ND)'
      required: true
      schema:
        type: string
        enum:
        - start
        - cancelStart
        - end
        - cancelEnd
    productType:
      name: productType
      in: query
      description: If present, will be used to filter, including only the products
        of this 'producType'
      schema:
        type: string
    productCode:
      name: productCode
      in: query
      description: Unique identifier of the product in operator's BSS/OSS systems
      schema:
        type: string
    purchaseId:
      name: purchaseId
      in: query
      description: Unique identifier of the purchase of the product by the User (Voucher,
        Subscription...)
      schema:
        type: string
  securitySchemes:
    APIKeyHeader:
      type: apiKey
      name: X-API-Key
      in: header

